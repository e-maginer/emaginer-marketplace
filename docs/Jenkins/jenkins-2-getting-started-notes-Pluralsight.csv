"Note","Course","Module","Clip","Time in Clip","URL"
"in our example (weather-free-style), we don't build but rather call npm install","Getting Started with Jenkins 2","Creating Application Builds","Compiling in Jenkins","0:35","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=5&mode=live&start=35&noteid=0c642242-70e7-4103-83c0-ed83ed08089a"
"in our case, the workspace is located in the folder var/jenkins_home then workspace because we mounted the jenkins volume to this folder when running the container:\njenkins-data:/var/jenkins_home","Getting Started with Jenkins 2","Creating Application Builds","Peeking into the Jenkins Workspace","1:04","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=6&mode=live&start=64&noteid=0f21f70e-4f76-4943-92bc-a1cba480539d"
"we can find all the archived artifacts in:\n/var/jenkins_home/jobs/ weather-free-style/builds\nchose a build number, then select the archive folder","Getting Started with Jenkins 2","Creating Application Builds","Archiving Artifacts","3:29","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=9&mode=live&start=209&noteid=ebf6883e-c5ed-4f8f-85a6-3f57b6b2809c"
"use option ""Delete workspace before build starts"" if we want to clean the entire workspace before each build vs maven clean which cleans the target folder only","Getting Started with Jenkins 2","Creating Application Builds","Build Time Trend","1:28","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=11&mode=live&start=88&noteid=fd2a2cb2-4a09-4c63-a2fc-0053566ee08b"
"post-build actions still run even if the build fails, but we can change this behavior in the advanced configuration","Getting Started with Jenkins 2","Creating Application Builds","Troubleshooting Build Failures","2:20","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=13&mode=live&start=140&noteid=ff4bf67d-c1b0-4fdd-9086-1892c769f182"
"we can copy config.xml file from our host into the Jenkins container using:\ndocker cp /Users/tmuhader/tmuhaderDrive/eBook/DevOps/Jenkins/jenkins-2-getting-started/jobs-nix/atmosphere/config.xml container_id:/var/jenkins_home/jobs/atmosphere/\n\nhttps://github.com/mailhog/MailHog\n\nthe SMTP server starts on port 1025\nthe HTTP server starts on port 8025","Getting Started with Jenkins 2","Creating Application Builds","Challenge and Importing Job config.xml Files","1:29","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m2&clip=14&mode=live&start=89&noteid=4a1759de-c272-4825-94f4-78d847053a95"
"the course is using Scripted Pipeline (Groovy) whereas we used the Declarative Pipeline for the weather app ","Getting Started with Jenkins 2","Testing and Continuous Integration","Creating a Pipeline Job to Execute Maven","1:35","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=2&mode=live&start=95&noteid=86229142-5529-4afa-b975-704f33ead8f3"
"For pipeline archiving, use the command Sample Step=General Build Step-> Build Step=Archive the artifacts in the pipeline syntax popup. this is comparable to the Archive post-build action we added in the free-style project","Getting Started with Jenkins 2","Testing and Continuous Integration","Archiving in a Pipeline","1:13","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=3&mode=live&start=73&noteid=4a982939-90f0-4d63-83c1-755bdb2921b0"
"in the Pipeline syntax popup, we can use the Declarative Directive Generator to generate the outset structure of our Pipeline (agent, stages, triggers...) and then use the snippet Generator to generate the steps for each stage","Getting Started with Jenkins 2","Testing and Continuous Integration","Archiving in a Pipeline","1:58","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=3&mode=live&start=118&noteid=27fed45c-095b-48b3-8800-1896aec534a8"
"in the Pipeline mode, we need to specify a node (agent) to execute the build, as this mode allows for more flexibility than the free-style mode like executing builds or tasks in parallel, pause in between to allow for human intervention like approvals for deployment once the build is done","Getting Started with Jenkins 2","Testing and Continuous Integration","The Master Agent Model","3:37","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=6&mode=live&start=217&noteid=1a742b6a-5044-4d35-b53a-21e7ac255034"
"node:\nagent { node { label 'labelName' } } behaves the same as agent { label 'labelName' }, but node allows for additional options (such as customWorkspace).","Getting Started with Jenkins 2","Testing and Continuous Integration","Allocating a Node and Workspace in a Pipeline","0:23","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=7&mode=live&start=23&noteid=2300d7f8-9c8d-4397-9ab6-902229f177af"
"adding ""stages"" to our pipeline allows us to view the status of each stage, in the job view page, when we run a build rather than going into the console logs","Getting Started with Jenkins 2","Testing and Continuous Integration","High-level Progress with Pipeline Stages","2:51","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=8&mode=live&start=171&noteid=258c5aea-d95c-4db2-bbfc-7c76680f09da"
"go to 'changes' menu item of a specific build to see what changed in the code in this build","Getting Started with Jenkins 2","Testing and Continuous Integration","Triggering Automatic Builds","5:11","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=9&mode=live&start=311&noteid=579a2e12-b373-49e8-a004-b2f95bd367d2"
"To send test emails from our mac I had to follow this procedure:\nhttps://www.joshstauffer.com/send-test-emails-on-a-mac-with-mailhog/","Getting Started with Jenkins 2","Testing and Continuous Integration","Configuring an Email Server","0:31","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=10&mode=live&start=31&noteid=72ca6576-4970-4b19-8596-292f90ca0b71"
"Run mailhog container using:\ndocker run --name mailhog -p 1025:1025 -p 8025:8025 -d mailhog/mailhog\n\nto configure Jenkins to send email, as we are running mailHog into a container then we need to set the ""SMTP server"" field in the ""Extended E-mail Notification"" section to the IP of the mailHog container (we can\nrun the mailHog container in the same network namespace (sandbox) as Jenkins so we can use localhost instead of container IP).\nIn our case mailHog container is attached, by default, to the Docker bridge network so we can identify the IP using ""docker inspect bridge"" or by running the ""ip addr"" from the mailhog container. view the mailhog UI using:\nhttp://localhost:8025/","Getting Started with Jenkins 2","Testing and Continuous Integration","Configuring an Email Server","1:19","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=10&mode=live&start=79&noteid=51e7d4f8-08c5-45ee-9154-112e91bc0454"
"get the Jenkins variables details (to be added to a notification email for example) from the Pipeline syntax popup->Global Variables References then we can refer to this variable using ${env.JOB_NAME}","Getting Started with Jenkins 2","Testing and Continuous Integration","Email Notification in a Pipeline","1:39","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=11&mode=live&start=99&noteid=99350e60-a815-4416-9788-69da06df5714"
"For Declarative pipeline, we use the following post section for sending email for success or failure:\npost { \n        always { \n            echo 'I will always say Hello again!'\n        }\n    }\n\nsee https://www.jenkins.io/doc/book/pipeline/syntax/#post\n\nor we can use the Declarative Directive Generator\nhttp://localhost:8080/view/all/job/atmosphere-pipeline/directive-generator/","Getting Started with Jenkins 2","Testing and Continuous Integration","Notifications When a Build Fails","0:16","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=12&mode=live&start=16&noteid=9b4e714e-5baf-40e6-bf20-c88b701dcfe1"
"use jest reporter to publish Jest test result https://github.com/digitalroute/jest-jenkins-reporter","Getting Started with Jenkins 2","Testing and Continuous Integration","Visualizing Test Results","1:39","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m3&clip=14&mode=live&start=99&noteid=65a6563f-3aee-4091-9395-9e28c1e1b0bc"
"this is a code coverage report generated by Jacoco tool, which is different from the testing report generated in the precedent section using JUnit tool","Getting Started with Jenkins 2","Finding and Managing Plugins","Integrating Code Coverage","1:06","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m4&clip=1&mode=live&start=66&noteid=88164479-c3b4-4a88-8210-a58e4d6343e5"
"because the code coverage report is generated inside a folder in our workspace and not published to Jenkins yet","Getting Started with Jenkins 2","Finding and Managing Plugins","Integrating Code Coverage","1:44","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m4&clip=1&mode=live&start=104&noteid=b8c91915-97da-4e53-99f9-e5608d8d349e"
"stashing allows saving the workspace folder in a temp location during the built time for 2 reasons:\n1)avoid fetching the code again (in case of multiple agents so different workspace) so the agent will just unstash the required files and use them\n2)ensure working on the same code version","Getting Started with Jenkins 2","Building Continuous Delivery Pipelines","Starting Point and Pipeline Stashing","5:01","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m5&clip=3&mode=live&start=301&noteid=036301f2-e753-4f1a-885f-a7f20d963173"
"in our case we run this command, to connect the agent with the master, from the master Jenkins container in folder tmp/download where we downloaded the JAR","Getting Started with Jenkins 2","Building Continuous Delivery Pipelines","Adding an Agent Node","3:07","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m5&clip=6&mode=live&start=187&noteid=579f413c-1fed-4e27-8d69-98d5b1ff5c40"
"Flyweight executors are similar to the Heavyweight executors on Master and Agent nodes which execute task but Flyweight does not lock any executor (in case of waiting for manual approval for example) and not run on the Master","Getting Started with Jenkins 2","Building Continuous Delivery Pipelines","Manual Approval for Deployments","2:59","https://app.pluralsight.com/player?course=jenkins-2-getting-started&author=wes-mcclure&name=jenkins-2-getting-started-m5&clip=9&mode=live&start=179&noteid=cce2c936-3f70-4bcd-a4bd-ba1efa538beb"